/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.brunner.service;

import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Component;

import com.brunner.service.SVC_AuthorityGroup.Messages_AuthorityGroup;
import com.brunner.service.dao.TB_COR_PROGRAM_MST;
import com.brunner.service.util.Constants;
import com.brunner.service.util.ExceptionUtil;
import com.brunner.service.util.MapUtil;
import com.brunner.service.util.Messages;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import mw.utility.BrunnerLogger;

@Component
public class SVC_Program {
	private final String CLASS = this.getClass().getName();
	private final Logger logger = BrunnerLogger.getLogger(CLASS);

	@PostConstruct
	public void init() {
		System.out.println(String.format("init bean [%s]", this.getClass().getName()));
	}	
	
	public JsonObject TXN_Program_registerProgram(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_Program.resultCode_systemException;
		String resultMessage = Constants_Program.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		int nEffected = 0;
   		
   		try {
    		List<HashMap<String, Object>> rows = TB_COR_PROGRAM_MST.select_02(
    				session,
    				txnId,
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString()
    				);
			
   			if(rows.size() > 0) {
	   			nEffected = TB_COR_PROGRAM_MST.update_01(
	   					session,
	   					txnId,
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("parentProgramId").getAsString().trim().equals("") ? null :
	    					request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("parentProgramId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("displaySeq").getAsInt(),	
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programName").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programClassPath").getAsString().equals("") ? null: 
	    					request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programClassPath").getAsString()
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Program.resultCode_success;
	    			resultMessage = String.format(Messages_Program.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
	    			resultCode = Constants_Program.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Program.msg_failToUpdateData);
				} else {
					// 오류: 여러건 변경
	    			resultCode = Constants_Program.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Program.msg_affectedDataMoreThanOneRow);
				}
   			} else {
	   			nEffected = TB_COR_PROGRAM_MST.insert_01(
	   					session,
	   					txnId,
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("parentProgramId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("displaySeq").getAsInt(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programName").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programClassPath").getAsString(),
	    				"Y"
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Program.resultCode_success;
	    			resultMessage = String.format(Messages_Program.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
					// 오류: 변경행 없음  			resultCode = Constants_Program.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Program.msg_failToUpdateData);
				} else {
					// 오류: 여러건 변경
	    			resultCode = Constants_Program.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Program.msg_affectedDataMoreThanOneRow);
				}
   			}
		} catch (Exception e) {
			resultCode = Constants_Program.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }
	
	public JsonObject TXN_Program_unregisterProgram(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_Program.resultCode_systemException;
		String resultMessage = Constants_Program.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		int nEffected = 0;
   		
   		try {
    		List<HashMap<String, Object>> rows = TB_COR_PROGRAM_MST.select_02(
    				session,
    				txnId,
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString()
    				);
			
   			if(rows.size() > 0) {
	   			nEffected = TB_COR_PROGRAM_MST.update_02(
	   					session,
	   					txnId,
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString()
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Program.resultCode_success;
	    			resultMessage = String.format(Messages_Program.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
					// 오류: 변경행 변경행 없음	resultCode = Constants_Program.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Program.msg_failToUpdateData);
				} else {
					// 오류: 여러건 변경
	    			resultCode = Constants_Program.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Program.msg_affectedDataMoreThanOneRow);
				}
   			} else {
    			resultCode = Constants_Program.resultCode_noDataFound;
    			resultMessage = String.format(Messages_Program.msg_notExistProgram, 
    					request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString());
   			}
		} catch (Exception e) {
			resultCode = Constants_Program.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	

	public JsonObject TXN_Program_viewProgramList(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_Program.resultCode_systemException;
		String resultMessage = Constants_Program.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		
   		try {
    		rows = TB_COR_PROGRAM_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				"%" + 
    				String.format("%s", 
    						request.get(Constants_Program.msgFieldName_inputData).getAsJsonObject().get("programId").getAsString()) 
    				+ "%");

    		JsonArray jProgramList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
       			jRow.addProperty("programId", MapUtil.getNullableString(row, "PROGRAM_ID"));
       			jRow.addProperty("parentProgramId", MapUtil.getNullableString(row, "PARENT_PROGRAM_ID"));
       			jRow.addProperty("displaySeq", MapUtil.getNullableString(row, "DISPLAY_SEQ"));
    			jRow.addProperty("programName", MapUtil.getNullableString(row, "PROGRAM_NAME"));
    			jRow.addProperty("programClassPath", MapUtil.getNullableString(row, "PROGRAM_CLASS_PATH"));
    			
    			jProgramList.add(jRow);
    		}

    		resultCode = Constants.resultCode_success; 
    		
    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.add("programList", jProgramList);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_Program.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	
	
	class Constants_Program extends Constants {
	}	

	static class Messages_Program extends Messages {
		public static String msg_alreadyExistProgram = "The program [%s] already exist.";
		public static String msg_notExistProgram = "The program [%s] not exist.";

	}	
}
