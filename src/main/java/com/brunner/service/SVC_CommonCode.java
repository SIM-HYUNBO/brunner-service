/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.brunner.service;

import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Component;

import com.brunner.service.SVC_AuthorityGroup.Constants_AuthorityGroup;
import com.brunner.service.SVC_AuthorityGroup.Messages_AuthorityGroup;
import com.brunner.service.dao.TB_COR_COMMON_CODE_GROUP;
import com.brunner.service.dao.TB_COR_COMMON_CODE_ITEM;
import com.brunner.service.util.Constants;
import com.brunner.service.util.ExceptionUtil;
import com.brunner.service.util.MapUtil;
import com.brunner.service.util.Messages;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import mw.utility.BrunnerLogger;

@Component
public class SVC_CommonCode {
	private final String CLASS = this.getClass().getName();
	private final Logger logger = BrunnerLogger.getLogger(CLASS);

	@PostConstruct
	public void init() {
		System.out.println(String.format("init bean [%s]", this.getClass().getName()));
	}	
	
	public JsonObject TXN_CommonCode_registerCommonCodeGroup(
			SqlSession session,
			JsonObject request) {

		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		int nEffected = 0;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_GROUP.select_02(
    				session,
    				txnId,
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				String.format("%s", request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeGroupId").getAsString()));

    		if(rows.size() > 0) {
				// 이미ㅣ있으므로 수정하면서 useFlag = 'Y'로 업데이트
    			nEffected = TB_COR_COMMON_CODE_GROUP.update_01(
    					session,
    					txnId,
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupDesc"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute1"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute2"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute3"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute4"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute5"),
    					"Y",
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "userId"));
    			
    			if(nEffected > 0) {
    				resultCode = Constants_CommonCode.resultCode_success;
    				resultMessage = String.format(Messages.msg_successfullyFinished, CLASS, METHOD);
    			} else {
    				
    			}
    		} else {
    			// 없으므로 인서트
    			nEffected = TB_COR_COMMON_CODE_GROUP.insert_01(
    					session,
    					txnId,
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupDesc"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute1"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute2"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute3"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute4"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute5"),
    					"Y",
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "userId")
    					);
    		}

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	
	
	public JsonObject TXN_CommonCode_unregisterCommonCodeGroup(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		int nEffected = 0;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_GROUP.select_02(
    				session,
    				txnId,
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				String.format("%s", request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeGroupId").getAsString()));

    		if(rows.size() > 0) {
				// 이미ㅣ있으므로 수정하면서 useFlag = NULL로 업데이트
    			nEffected = TB_COR_COMMON_CODE_GROUP.update_02(
    					session,
    					txnId,
        				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    					request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeGroupId").getAsString(),
    					request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    			if(nEffected > 0) {
    				resultCode = Constants_CommonCode.resultCode_success;
    				resultMessage = String.format(Messages.msg_successfullyFinished, CLASS, METHOD);				
    			} else {
    				resultCode = Constants_CommonCode.resultCode_failToUpdateData;
    				resultMessage = Messages.msg_noAffectedData;				    				
    			}    			
    		} else {
    			resultCode = Constants_CommonCode.resultCode_noDataFound;
    			resultMessage = String.format(Messages_CommonCode.msg_noSuchCommonCodeGroup, 
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"));
    		}

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }		

	public JsonObject TXN_CommonCode_registerCommonCode(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		int nEffected = 0;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_ITEM.select_03(
    				session,
    				txnId,
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeGroupId").getAsString(),
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeId").getAsString(),
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("key1").getAsString(),
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("key2").getAsString()
    				);

    		if(rows.size() > 0) {
				// 이미ㅣ있으므로 수정하면서 useFlag = 'Y'로 업데이트
    			nEffected = TB_COR_COMMON_CODE_ITEM.update_01(
    					session,
    					txnId,
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeId"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key1"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key2"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeDesc"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute1"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute2"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute3"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute4"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute5"),
    					"Y",
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "userId"));
    			
    			if(nEffected > 0) {
    				resultCode = Constants_CommonCode.resultCode_success;
    				resultMessage = String.format(Messages.msg_successfullyFinished, CLASS, METHOD);
    			} else {
    				resultCode = Constants_CommonCode.resultCode_failToUpdateData;
    				resultMessage = Messages.msg_noAffectedData;
    			}    			
    		} else { 
    			// 없으므로 인서트
    			nEffected = TB_COR_COMMON_CODE_ITEM.insert_01(
    					session,
    					txnId,
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
           				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeId"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key1"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key2"),
           			    MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeDesc"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute1"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute2"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute3"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute4"),
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "attribute5"),
    					"Y",
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "userId")
    					);
 
    			if(nEffected > 0) {
    				resultCode = Constants_CommonCode.resultCode_success;
    				resultMessage = String.format(Messages.msg_successfullyFinished, CLASS, METHOD);
    			} else {
    				resultCode = Constants_CommonCode.resultCode_failToUpdateData;
    				resultMessage = Messages.msg_noAffectedData;
    			}    			
    		}

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	
	
	public JsonObject TXN_CommonCode_unregisterCommonCode(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   		

   		List<HashMap<String, Object>> rows = null;
   		int nEffected = 0;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_ITEM.select_03(
    				session,
    				txnId,
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeId"),
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key1"),
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key2")
    				);

    		if(rows.size() > 0) {
				// 이미ㅣ있으므로 수정하면서 useFlag = NULL로 업데이트
    			nEffected = TB_COR_COMMON_CODE_ITEM.update_02(
    					session,
    					txnId,
        				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeId"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key1"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key2"),
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "userId"));
    			
    			if(nEffected > 0) {
    				resultCode = Constants_CommonCode.resultCode_success;
    				resultMessage = String.format(Messages.msg_successfullyFinished, CLASS, METHOD);
    			} else {
    				resultCode = Constants_CommonCode.resultCode_failToUpdateData;
    				resultMessage = Messages.msg_noAffectedData;
    			}       			
    		} else {
    			resultCode = Constants_CommonCode.resultCode_noDataFound;
    			resultMessage = String.format(Messages_CommonCode.msg_noSuchCommonCodeGroup, 
    					MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"));
    		}

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }
	
	public JsonObject TXN_CommonCode_viewCommonCodeGroupList(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   		

   		List<HashMap<String, Object>> rows = null;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_GROUP.select_01(
    				session,
    				txnId,
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				"%" + 
    				String.format("%s", 
    						request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeGroupId").getAsString()) 
    				+ "%");

    		JsonArray jCommonCodeItemList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
    			jRow.addProperty("systemCode", row.get("SYSTEM_CODE").toString());
    			jRow.addProperty("commonCodeGroupId", row.get("COMMON_CODE_GROUP_ID").toString());
    			jRow.addProperty("commonCodeGroupDesc", row.get("COMMON_CODE_GROUP_DESC").toString());
       			jRow.addProperty("attribute1", MapUtil.getNullableString(row, "ATTRIBUTE_1"));
       		    jRow.addProperty("attribute2", MapUtil.getNullableString(row, "ATTRIBUTE_2"));
    			jRow.addProperty("attribute3", MapUtil.getNullableString(row, "ATTRIBUTE_3"));
    			jRow.addProperty("attribute4", MapUtil.getNullableString(row, "ATTRIBUTE_4"));
    			jRow.addProperty("attribute5", MapUtil.getNullableString(row, "ATTRIBUTE_5"));
    			jRow.addProperty("createUserId", MapUtil.getNullableString(row, "CREATE_USER_ID"));
    			jRow.addProperty("createTime", MapUtil.getNullableString(row, "CREATE_TIME").toString());
    			jRow.addProperty("updateUserId", MapUtil.getNullableString(row, "UPDATE_USER_ID"));
    			jRow.addProperty("updateTime", MapUtil.getNullableString(row, "UPDATE_TIME").toString());
    			
    			jCommonCodeItemList.add(jRow);
    		}
    		resultCode = Constants_AuthorityGroup.resultCode_success;

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.add("commonCodeItemList", jCommonCodeItemList);

			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }

	public JsonObject TXN_CommonCode_viewCommonCodeItemList(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_ITEM.select_01(
    				session,
    				txnId,
    				request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				String.format("%s", request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject().get("commonCodeGroupId").getAsString()));

    		JsonArray jCommonCodeItgemList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
    			jRow.addProperty("systemCode", row.get("SYSTEM_CODE").toString());
    			jRow.addProperty("commonCodeId", row.get("COMMON_CODE_ID").toString());
    			jRow.addProperty("commonCodeDesc", MapUtil.getNullableString(row, "COMMON_CODE_DESC"));
       			jRow.addProperty("key1", MapUtil.getNullableString(row, "KEY_1"));
       		    jRow.addProperty("key2", MapUtil.getNullableString(row, "KEY_2"));
       			jRow.addProperty("attribute1", MapUtil.getNullableString(row, "ATTRIBUTE_1"));
       		    jRow.addProperty("attribute2", MapUtil.getNullableString(row, "ATTRIBUTE_2"));
    			jRow.addProperty("attribute3", MapUtil.getNullableString(row, "ATTRIBUTE_3"));
    			jRow.addProperty("attribute4", MapUtil.getNullableString(row, "ATTRIBUTE_4"));
    			jRow.addProperty("attribute5", MapUtil.getNullableString(row, "ATTRIBUTE_5"));
    			jRow.addProperty("createUserId", MapUtil.getNullableString(row, "CREATE_USER_ID"));
    			jRow.addProperty("createTime", MapUtil.getNullableString(row, "CREATE_TIME").toString());
    			jRow.addProperty("updateUserId", MapUtil.getNullableString(row, "UPDATE_USER_ID"));
    			jRow.addProperty("updateTime", MapUtil.getNullableString(row, "UPDATE_TIME").toString());
    			
    			jCommonCodeItgemList.add(jRow);
    		}
    		resultCode = Constants_AuthorityGroup.resultCode_success;

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.add("commonCodeItemList", jCommonCodeItgemList);

			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	

	public JsonObject TXN_CommonCode_viewCommonCodeItemListByKey(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_CommonCode.resultCode_systemException;
		String resultMessage = Constants_CommonCode.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		
   		try {
    		rows = TB_COR_COMMON_CODE_ITEM.select_02(
    				session,
    				txnId,
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "systemCode"), 
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "commonCodeGroupId"),
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key1"), 
    				MapUtil.getNullableString(request.get(Constants_CommonCode.msgFieldName_inputData).getAsJsonObject(), "key2") 
    				);

    		JsonArray jCommonCodeItgemList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
    			jRow.addProperty("systemCode", row.get("SYSTEM_CODE").toString());
    			jRow.addProperty("commonCodeId", row.get("COMMON_CODE_ID").toString());
    			jRow.addProperty("commonCodeDesc", MapUtil.getNullableString(row, "COMMON_CODE_DESC"));
       			jRow.addProperty("key1", MapUtil.getNullableString(row, "KEY_1"));
       		    jRow.addProperty("key2", MapUtil.getNullableString(row, "KEY_2"));
       			jRow.addProperty("attribute1", MapUtil.getNullableString(row, "ATTRIBUTE_1"));
       		    jRow.addProperty("attribute2", MapUtil.getNullableString(row, "ATTRIBUTE_2"));
    			jRow.addProperty("attribute3", MapUtil.getNullableString(row, "ATTRIBUTE_3"));
    			jRow.addProperty("attribute4", MapUtil.getNullableString(row, "ATTRIBUTE_4"));
    			jRow.addProperty("attribute5", MapUtil.getNullableString(row, "ATTRIBUTE_5"));
    			jRow.addProperty("createUserId", MapUtil.getNullableString(row, "CREATE_USER_ID"));
    			jRow.addProperty("createTime", MapUtil.getNullableString(row, "CREATE_TIME").toString());
    			jRow.addProperty("updateUserId", MapUtil.getNullableString(row, "UPDATE_USER_ID"));
    			jRow.addProperty("updateTime", MapUtil.getNullableString(row, "UPDATE_TIME").toString());
    			
    			jCommonCodeItgemList.add(jRow);
    		}
    		resultCode = Constants_AuthorityGroup.resultCode_success;

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.add("commonCodeItemList", jCommonCodeItgemList);

			resultCode = Constants_CommonCode.resultCode_success;
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_CommonCode.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	
	
	public class Constants_CommonCode extends Constants {
	}	

	public static class Messages_CommonCode extends Messages {
		public static String msg_noSuchCommonCodeGroup = "The commonCode Group Id [%s] not exist";		
	}	
}
