/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.brunner.service;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Component;

import com.brunner.service.SVC_AuthorityGroup.Messages_AuthorityGroup;
import com.brunner.service.dao.TB_COR_USER_LICENSE;
import com.brunner.service.dao.TB_COR_USER_MST;
import com.brunner.service.util.Constants;
import com.brunner.service.util.ExceptionUtil;
import com.brunner.service.util.MapUtil;
import com.brunner.service.util.Messages;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import mw.utility.BrunnerLogger;

@Component
public class SVC_UserInfo {
	private final String CLASS = this.getClass().getName();
	private final Logger logger = BrunnerLogger.getLogger(CLASS);

	@PostConstruct
	public void init() {
		System.out.println(String.format("init bean [%s]", this.getClass().getName()));
	}	
	
	public JsonObject TXN_UserInfo_logIn(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   			

   		List<HashMap<String, Object>> rows = null;
   		List<HashMap<String, Object>> rowsLicense = null;
   		HashMap<String, Object> row = null;
   		HashMap<String, Object> userLicense = null;
   		
   		try {
    		rows = TB_COR_USER_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());

    		if(rows.size() > 0) {
    			row = rows.get(0);
    			
    			if(row.get("PASSWORD").equals(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("password").getAsString()) == false) {
        			resultCode = Constants_UserInfo.resultCode_noDataFound;
        			resultMessage = String.format(Messages_UserInfo.msg_invalidPassword, CLASS, METHOD);
    			} 
    			else {
    				rowsLicense = TB_COR_USER_LICENSE.select_02(
    						session,
    						txnId,
    	    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    	    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString()
    						);
    				
    				if(rowsLicense.size() > 0){
    					userLicense = rowsLicense.get(0);
    					try {
    						Date expireDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse((String) userLicense.get("EXPIRE_DATE"));
    						
							if(userLicense.get("USE_FLAG").equals("Y") == false || expireDate.before(Calendar.getInstance().getTime())){
								// 라이센스가 만료되었거나 유효하지 않습니다.
								resultCode = Constants_UserInfo.resultCode_systemException;
								resultMessage = String.format(Messages_UserInfo.msg_userLicenseExpiredorNotUsable, CLASS, METHOD);
							}
							else {
								resultCode = Constants_UserInfo.resultCode_success;
								resultMessage = String.format(Messages_UserInfo.msg_successfullyFinished, CLASS, METHOD);
							}
						} catch (Exception e) {
							resultCode = Constants_UserInfo.resultCode_systemException;
							resultMessage = String.format(ExceptionUtil.getFullMessage(e), CLASS, METHOD);
						}
    				}
    				else {
    					// 유효한 라이센스가 없습니다.
		    			resultCode = Constants_UserInfo.resultCode_systemException;
		    			resultMessage = String.format(Messages_UserInfo.msg_userHasNolicense, CLASS, METHOD);
    				}
    			}
    		}
    		else {
    			resultCode = Constants_UserInfo.resultCode_noDataFound;
    			resultMessage = String.format(
    					Messages_UserInfo.msg_uerNotExists, 
    					request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString()
    					);
    		}
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			JsonObject jUserInfo = new JsonObject();
			JsonObject jUserLicenseInfo = new JsonObject();
			
			if(row != null) {
				for(String key : row.keySet())
					jUserInfo.addProperty(key, MapUtil.getNullableString(row, key));

				if(userLicense != null) {
					for(String key : userLicense.keySet())
						jUserLicenseInfo.addProperty(key, MapUtil.getNullableString(userLicense, key));
					
				}
				jUserInfo.add("userLicenseInfo", jUserLicenseInfo);
				
				reply.add("userInfo", jUserInfo);
			}

			
			
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }
	
	public JsonObject TXN_UserInfo_changePassword(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   			

   		List<HashMap<String, Object>> rows;
   		int nEffected;
   		
   		try {
    		rows = TB_COR_USER_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());

    		if(rows.size() > 0) {
    			HashMap<String, Object> row = rows.get(0);
    			
    			if(row.get("PASSWORD").equals(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("currentPassword").getAsString()) == false) {
    				// 오류: 현재 비밀번호가 틀린 경우
        			resultCode = Constants_UserInfo.resultCode_noDataFound;
        			resultMessage = String.format(Messages_UserInfo.msg_invalidPassword, CLASS, METHOD);
    			}
    			else {
    				// 비밀번호 유효성 검사
    				String newPassword = request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("newPassword").getAsString();
    				String currentPassword = request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("currentPassword").getAsString();
    				
    				if(newPassword.equals(currentPassword)) {
    					// 오류: 이전 비밀번호와 동일
    	    			resultCode = Constants_UserInfo.resultCode_systemException;
    	    			resultMessage = String.format(Messages_UserInfo.msg_newPasswordIsSameWithCurrent, newPassword);
    				}
    				else if(newPassword.length() < 8) {
    					// 오류: 신규 비밀번호의 길이가 너무 짧음
    	    			resultCode = Constants_UserInfo.resultCode_systemException;
    	    			resultMessage = String.format(Messages_UserInfo.msg_newPasswordLengthIsTooShort, newPassword);
    				}
    				else {
    					// 비밀번호 변경
    		    		nEffected = TB_COR_USER_MST.update_01(
    		    				session,
    		    				txnId,
    		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("newPassword").getAsString(),
    		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
    		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
    		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("currentPassword").getAsString()
    		    				);
    		    		
        				if(nEffected == 1) {
	    	    			resultCode = Constants_UserInfo.resultCode_success;
	    	    			resultMessage = String.format(Messages_UserInfo.msg_successfullyFinished, CLASS, METHOD);
        				} else if(nEffected == 0) {
        					// 오류: 변경행 없음     	    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
        	    			resultMessage = String.format(Messages_UserInfo.msg_failToUpdateData);
        				} else {
        					// 오류: 여러건 변경
        	    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
        	    			resultMessage = String.format(Messages_UserInfo.msg_affectedDataMoreThanOneRow);
        				}
    				}
    			}
    		}
    		else {
    			resultCode = Constants_UserInfo.resultCode_noDataFound;
    			resultMessage = String.format(Messages_UserInfo.msg_uerNotExists, request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    		}
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	

	public JsonObject TXN_UserInfo_registerUser(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
		
		StringBuffer sbLicenseKey = null;
		
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   		

   		List<HashMap<String, Object>> rows;
   		int nEffected;
   		
   		try {
    		rows = TB_COR_USER_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    		
    		if(rows.size() > 0) {
				// 오류: 이미 존재하는 사용자 아이디
    			resultCode = Constants_UserInfo.resultCode_alreadyExistData;
    			resultMessage = String.format(Messages_UserInfo.msg_alreadyExistUserId, CLASS, METHOD);
    		} else {
    			// 비밀번호 유효성 검사
    			String password = request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("password").getAsString();
    			
    			if(password.length() < 8) {
					// 비밀번호의 길이가 너무 짧음
	    			resultCode = Constants_UserInfo.resultCode_systemException;
	    			resultMessage = String.format(Messages_UserInfo.msg_newPasswordLengthIsTooShort, password);
				}
    			else {
    				
		    		// 사용자 등록
		     		nEffected = TB_COR_USER_MST.insert_01(
		     				session,
		     				txnId,
		    				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "systemCode"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "userId"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "password"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "userName"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "address"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "phoneNumber"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "eMailId"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "registerNo"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "registerName"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "salesType"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "saleCategory"),
		     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "useFlag")
		     				);
		
					if(nEffected == 1) {
						// 라이센스 발행하고 회원가입이 되었습니다. 
						// 라이센스 번호에 대한 연간 사용료를 지불하신 후 시스템 사용이 가능합니다.
						
						List<HashMap<String, Object>> rowsLicense = null;
						do {
							sbLicenseKey = new StringBuffer();
							Random rnd=new Random();

							for(int a=0;a<19;a++)
								if(a == 4 || a == 9 || a == 14)
									sbLicenseKey.append('-');
								else
									sbLicenseKey.append((char) ('0'+ rnd.nextInt(10)));
							
							rowsLicense = TB_COR_USER_LICENSE.select_01(
									session,
									txnId,
				    				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "systemCode"),
			     				sbLicenseKey.toString());
						} while(rowsLicense.size() > 0);
						
			     		nEffected = TB_COR_USER_LICENSE.insert_01(
			     				session,
			     				txnId,
			    				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "systemCode"),
			     				MapUtil.getNullableString(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject(), "userId"),
			     				sbLicenseKey.toString());
			     		
			     		if(nEffected == 1) {
			    			resultCode = Constants_UserInfo.resultCode_success;
			    			resultMessage = String.format(Messages_UserInfo.msg_successfullySignUp, CLASS, METHOD);
			     		}
					} else if(nEffected == 0) {
						// 오류: 인서트 실패
		    			resultCode = Constants_UserInfo.resultCode_failToInsertData;
		    			resultMessage = String.format(Messages_UserInfo.msg_failToInsertData);
					} else {
						// 오류: 여러건 인서트
		    			resultCode = Constants_UserInfo.resultCode_failToInsertData;
		    			resultMessage = String.format(Messages_UserInfo.msg_affectedDataMoreThanOneRow);
					}
    			}
    		}
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			if(resultCode == Constants_UserInfo.resultCode_success) {
				if(sbLicenseKey != null && sbLicenseKey.toString().length() > 0)
					reply.addProperty(Constants_UserInfo.msgFieldName_licenseKey, sbLicenseKey.toString());
			}
			
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }
	
	public JsonObject TXN_UserInfo_updateUser(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   		

   		List<HashMap<String, Object>> rows;
   		int nEffected;
   		
   		try {
    		rows = TB_COR_USER_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    		
    		if(rows.size() == 0) {
				// 오류: 존재하지 않는 사용자 아이디
    			resultCode = Constants_UserInfo.resultCode_noDataFound;
    			resultMessage = String.format(Messages_UserInfo.msg_uerNotExists, CLASS, METHOD);
    		} else {
    			// 비밀번호 유효성 검사
    			String password = request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("password").getAsString();
    			
    			if(password.equals(rows.get(0).get("PASSWORD")) == false) {
					// 오류: 현재 비밀번호 불일치
	    			resultCode = Constants_UserInfo.resultCode_systemException;
	    			resultMessage = String.format(Messages_UserInfo.msg_invalidPassword, password);
				}
    			else {
		    		// 사용자 정보 변경
		     		nEffected = TB_COR_USER_MST.update_02(
		     				session,
		     				txnId,
		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userName").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("address").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("phoneNumber").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("eMailId").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("password").getAsString()
		     				);
		
					if(nEffected == 1) {
		    			resultCode = Constants_UserInfo.resultCode_success;
		    			resultMessage = String.format(Messages_UserInfo.msg_successfullyFinished, CLASS, METHOD);
					} else if(nEffected == 0) {
						// 오류: 업데이트 실패
		    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
		    			resultMessage = String.format(Messages_UserInfo.msg_failToUpdateData);
					} else {
						// 오류: 여러건 업데이트
		    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
		    			resultMessage = String.format(Messages_UserInfo.msg_affectedDataMoreThanOneRow);
					}
    			}
    		}
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }
	
	@SuppressWarnings("deprecation")
	public JsonObject TXN_UserInfo_registerUserAuthorityGroup(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows;
   		int nEffected;
   		
   		try {
    		rows = TB_COR_USER_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    		
    		if(rows.size() == 0) {
				// 오류: 존재하지 않는 사용자 아이디
    			resultCode = Constants_UserInfo.resultCode_noDataFound;
    			resultMessage = String.format(Messages_UserInfo.msg_uerNotExists, CLASS, METHOD);
    		} else {
	    		// 사용자 정보 변경
	     		nEffected = TB_COR_USER_MST.update_04(
	     				session,
	     				txnId,
	    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
	     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("authorityGroupId").getAsString(),
	     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("updateUserId").getAsString()
	     				);
	
				if(nEffected == 1) {
					Date licenseExpireDate = new SimpleDateFormat("yyyy-MM-dd").parse(request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("licenseExpireDate").getAsString());
					licenseExpireDate.setHours(23);
					licenseExpireDate.setMinutes(59);
					licenseExpireDate.setSeconds(59);
					
					// 사용자 라이센스 정보 변경
		     		nEffected = TB_COR_USER_LICENSE.update_01(
		     				session,
		     				txnId,
		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
		     				licenseExpireDate
		     				);
					
	    			resultCode = Constants_UserInfo.resultCode_success;
	    			resultMessage = String.format(Messages_UserInfo.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
					// 오류: 업데이트 실패
	    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_UserInfo.msg_failToUpdateData);
				} else {
					// 오류: 여러건 업데이트
	    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_UserInfo.msg_affectedDataMoreThanOneRow);
				}
    		}
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	
	
	public JsonObject TXN_UserInfo_deleteUser(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   		

   		List<HashMap<String, Object>> rows;
   		int nEffected;
   		
   		try {
    		rows = TB_COR_USER_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    		
    		if(rows.size() == 0) {
				// 오류: 존재하지 않는 사용자 아이디
    			resultCode = Constants_UserInfo.resultCode_noDataFound;
    			resultMessage = String.format(Messages_UserInfo.msg_uerNotExists, request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString());
    		} else {
    			// 비밀번호 유효성 검사
    			String password = request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("password").getAsString();
    			
    			if(password.equals(rows.get(0).get("PASSWORD")) == false) {
					// 오류: 현재 비밀번호 불일치
	    			resultCode = Constants_UserInfo.resultCode_systemException;
	    			resultMessage = String.format(Messages_UserInfo.msg_invalidPassword, password);
				}
    			else {
		    		// 사용자 정보 변경 (USE_FLAG = 'N')
		     		nEffected = TB_COR_USER_MST.update_03(
		     				session,
		     				txnId,
		    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
		     				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("password").getAsString()
		     				);
		
					if(nEffected == 1) {
		    			resultCode = Constants_UserInfo.resultCode_success;
		    			resultMessage = String.format(Messages_UserInfo.msg_successfullyFinished, CLASS, METHOD);
					} else if(nEffected == 0) {
						// 오류: 업데이트 실패
		    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
		    			resultMessage = String.format(Messages_UserInfo.msg_failToUpdateData);
					} else {
						// 오류: 여러건 업데이트
		    			resultCode = Constants_UserInfo.resultCode_failToUpdateData;
		    			resultMessage = String.format(Messages_UserInfo.msg_affectedDataMoreThanOneRow);
					}
    			}
    		}
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }		
	
	public JsonObject TXN_UserInfo_viewUserList(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
				
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows;
		
   		reply = new JsonObject();

		try {
    		rows = TB_COR_USER_MST.select_03(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
    				"%" + 
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString() 
    				+ "%");

    		JsonArray jUserList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
       			jRow.addProperty("systemCode", MapUtil.getNullableString(row, "SYSTEM_CODE"));
       		    jRow.addProperty("userId", MapUtil.getNullableString(row, "USER_ID"));
       			jRow.addProperty("userName", MapUtil.getNullableString(row, "USER_NAME"));
    			
    			jUserList.add(jRow);
    		}    		
    		reply.add("userList", jUserList);
    		resultCode = Constants.resultCode_success;
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }

	public JsonObject TXN_UserInfo_viewUserAuthorityGroupList(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_UserInfo.resultCode_systemException;
		String resultMessage = Constants_UserInfo.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows;
		
   		reply = new JsonObject();

		try {
    		rows = TB_COR_USER_MST.select_02(
    				session,
    				txnId,
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(),
    				"%" + 
    				request.get(Constants_UserInfo.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString() 
    				+ "%");

    		JsonArray jUserList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
       			jRow.addProperty("systemCode", MapUtil.getNullableString(row, "SYSTEM_CODE"));
       		    jRow.addProperty("userId", MapUtil.getNullableString(row, "USER_ID"));
       			jRow.addProperty("userName", MapUtil.getNullableString(row, "USER_NAME"));
    			jRow.addProperty("authorityGroupId", MapUtil.getNullableString(row, "AUTHORITY_GROUP_ID"));
    			jRow.addProperty("authorityGroupName", MapUtil.getNullableString(row, "AUTHORITY_GROUP_NAME").toString());
       			jRow.addProperty("licenseExpireDate", MapUtil.getNullableString(row, "LICENSE_EXPIRE_DATE").toString());
       		    			
    			jUserList.add(jRow);
    		}    		
    		reply.add("userList", jUserList);
    		resultCode = Constants.resultCode_success;
		} catch (Exception e) {
			resultCode = Constants_UserInfo.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }		
	
	static class Constants_UserInfo extends Constants {
		public static String msgFieldName_licenseKey = "licenseKey";
	}	

	static class Messages_UserInfo extends Messages {
		public static String msg_uerNotExists = "The user [%s] not exists.";
		public static String msg_invalidPassword = "The password is invalid.";
		public static String msg_newPasswordIsSameWithCurrent = "The password is same with old one.";
		public static String msg_newPasswordLengthIsTooShort = "The password length is too short.";
		public static String msg_alreadyExistUserId = "The user id already exists.";
		public static String msg_successfullySignUp = "The user id created successfully. \nThe system is available after paying an annual fee for the license.";
		public static String msg_userHasNolicense = "The user has no available license.";
		public static String msg_userLicenseExpiredorNotUsable = "The user license expired or not usable.";
	}	
}
